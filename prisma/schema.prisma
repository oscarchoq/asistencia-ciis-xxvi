// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  administrador
  organizador
  asistencia
  kits
  recepcion
}

enum PaymentMethod {
  yape
  bcp
  efectivo
  otros
}

enum PlanType {
  profesionales
  estudiantes
  delegaciones
  docenteesis
  estudianteesis
}

enum InscriptionType {
  virtual
  presencial
}

enum Semestre {
  segundo
  cuarto
  sexto
  octavo
  decimo
}

model Inscripcion {
  id_inscripcion      String          @id @default(uuid())
  correo_formulario   String?
  correo              String
  nombres             String
  apellidos           String
  numero_documento    String          @unique
  celular             String
  pais                String?
  universidad         String?
  plan                PlanType
  metodo_pago         PaymentMethod
  pago_validado       Boolean         @default(false)
  fecha_pago_validado DateTime?
  link_voucher        String?
  link_matricula      String?
  link_fotocheck      String?
  observaciones       String?
  email_enviado       Boolean         @default(false)
  tipo_inscripcion    InscriptionType @default(virtual)
  codigo_matricula    String?
  semestre            Semestre?
  createdAt           DateTime        @db.Timestamp(3) @default(dbgenerated("now()"))
  updatedAt           DateTime        @db.Timestamp(3) @updatedAt
  id_usuario          String?

  validado_por Usuario?      @relation(fields: [id_usuario], references: [id_usuario])
  Asistencia   Asistencia[]
  Kit          Kit[]
}

model Usuario {
  id_usuario String   @id @default(uuid())
  correo     String   @unique
  password   String
  name       String
  role       Role     @default(organizador)
  activo     Boolean  @default(true)
  createdAt  DateTime @db.Timestamp(3) @default(dbgenerated("now()"))

  Asistencia  Asistencia[]
  Inscripcion Inscripcion[]
  Kit         Kit[]
}

model Evento {
  id_evento    String   @id @default(uuid())
  denominacion String
  descripcion  String?
  fecha_evento DateTime @db.Date()
  hora_inicio  DateTime @db.Time()
  hora_fin     DateTime @db.Time()
  activo       Boolean  @default(true)
  createdAt    DateTime @db.Timestamp(3) @default(dbgenerated("now()"))

  Asistencia Asistencia[]
}

model Asistencia {
  id_asistencia    String   @id @default(uuid())
  id_inscripcion   String
  id_evento        String
  fecha_asistencia DateTime @default(dbgenerated("CURRENT_DATE")) @db.Date()
  hora_asistencia  DateTime @default(dbgenerated("CURRENT_TIME")) @db.Time()
  activo           Boolean  @default(true)
  id_usuario       String
  createdAt        DateTime @db.Timestamp(3) @default(dbgenerated("now()"))

  inscripcion    Inscripcion @relation(fields: [id_inscripcion], references: [id_inscripcion])
  evento         Evento      @relation(fields: [id_evento], references: [id_evento])
  registrado_por Usuario     @relation(fields: [id_usuario], references: [id_usuario])

  @@unique([id_inscripcion, id_evento]) // Evitar que una persona marque asistencia mas de una vez por evento
}

model Kit {
  id_kit         String   @id @default(uuid())
  id_inscripcion String
  entregado      Boolean  @default(false)
  fecha_entrega  DateTime @default(dbgenerated("CURRENT_DATE")) @db.Date()
  observaciones  String?
  activo         Boolean  @default(true)
  id_usuario     String
  createdAt      DateTime @db.Timestamp(3) @default(dbgenerated("now()"))

  inscripcion   Inscripcion @relation(fields: [id_inscripcion], references: [id_inscripcion])
  entregado_por Usuario     @relation(fields: [id_usuario], references: [id_usuario])

  @@unique([id_inscripcion]) // Evitar que una persona reciba mas de un kit
}
